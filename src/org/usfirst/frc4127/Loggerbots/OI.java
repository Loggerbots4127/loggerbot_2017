// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4127.Loggerbots;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Joystick moveStick;
    private JoystickButton buttonA,buttonB,buttonX,buttonY;
    private AnalogGyro analogGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        moveStick = new Joystick(0);
        
        buttonA = new JoystickButton(moveStick, 1);
        buttonB = new JoystickButton(moveStick, 2);
        buttonX = new JoystickButton(moveStick, 3);
        buttonY = new JoystickButton(moveStick, 4);
        
        analogGyro = new AnalogGyro(1);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getMoveX() {
    	if (Math.abs(moveStick.getRawAxis(0))>.1) {
        return moveStick.getRawAxis(0);
    	} else {
    		return 0;
    	}
    }

    public double getMoveY() {
    	if (Math.abs(moveStick.getRawAxis(1))>.1) {
        return -moveStick.getRawAxis(1);
    	} else {
    		return 0;
    	}
    }
    
    public double getRotate() {
    	if (Math.abs(moveStick.getRawAxis(5))>.1) {
    		return -moveStick.getRawAxis(5);
    	} else {
    		return 0;
    	}
    }
    
    public boolean getAButton() {
    	return buttonA.get();
    }
    
    public boolean getBButton() {
    	return buttonB.get();
    }
    
    public boolean getXButton() {
    	return buttonX.get();
    }
    
    public boolean getYButton() {
    	return buttonY.get();
    }
    
    public double getHeading() {
    	return analogGyro.getAngle();
    }
    
    public void calibrateGyro() {
    	analogGyro.calibrate();
    }
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

